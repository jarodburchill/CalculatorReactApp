{"version":3,"sources":["components/Calculator/Controls/Button/Button.module.scss","components/Calculator/Display/Display.module.scss","components/Calculator/Controls/Button/Button.js","components/Calculator/Controls/Controls.module.scss","components/Calculator/Calculator.module.scss","components/App.module.scss","components/Calculator/Controls/Controls.js","components/Calculator/Display/Display.js","components/Calculator/Calculator.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","defaultButton","clearButton","zeroButton","operatorButton","container","formula","display","Button","props","_useState","useState","_useState2","Object","E_Projects_calculator_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","calculate","setCalculate","getButtonStyle","symbol","styles","useEffect","setDisplayValue","eval","setFormula","onButtonClick","e","includes","displayValue","operator","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","onClick","className","Controls","buttons","require","react_default","map","item","index","key","newLine","renderNewLine","Display","value","readOnly","Calculator","slicedToArray","_useState3","_useState4","Calculator_Display_Display","Calculator_Controls_Controls","App","components_Calculator_Calculator","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a0611564.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"defaultButton\":\"Button_defaultButton__2k4bx\",\"clearButton\":\"Button_clearButton__3e6rX\",\"zeroButton\":\"Button_zeroButton__3VGUd\",\"operatorButton\":\"Button_operatorButton__2pdcR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Display_container__1bxYv\",\"formula\":\"Display_formula__1URA7\",\"display\":\"Display_display__2jkAy\"};","import React, { useState, useEffect } from 'react';\r\nimport styles from './Button.module.scss';\r\n\r\nconst Button = (props) => {\r\n  const [calculate, setCalculate] = useState(false);\r\n\r\n  const getButtonStyle = () => {\r\n    switch (props.symbol) {\r\n      case \"C\":\r\n        return styles.clearButton;\r\n      case \"÷\":\r\n      case \"×\":\r\n      case \"-\":\r\n      case \"+\":\r\n      case \"=\":\r\n        return styles.operatorButton;\r\n      case \"0\":\r\n        return styles.zeroButton;\r\n      default:\r\n        return styles.defaultButton;\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (calculate) {\r\n      props.setDisplayValue(eval(props.formula));\r\n      props.setFormula(props.formula + props.symbol);\r\n      setCalculate(false);\r\n    }\r\n  }, [props.formula]);\r\n\r\n  const onButtonClick = e => {\r\n    switch (props.symbol) {\r\n      case \"=\":\r\n        if (!props.formula.includes(\"=\")) {\r\n          setCalculate(true);\r\n          props.setFormula(props.formula + props.displayValue);\r\n        }\r\n        break;\r\n      case \"C\":\r\n        props.setDisplayValue(\"0\");\r\n        props.setFormula(\"\");\r\n        break;\r\n      case \"÷\":\r\n      case \"×\":\r\n      case \"-\":\r\n      case \"+\":\r\n        if (props.formula.includes(\"=\")) {\r\n          props.setFormula(props.displayValue + props.operator);\r\n          props.setDisplayValue(\"0\");\r\n        }\r\n        else {\r\n          props.setFormula(props.formula + props.displayValue + props.operator);\r\n          props.setDisplayValue(\"0\");\r\n        }\r\n        break;\r\n      case \".\":\r\n        if (props.formula.includes(\"=\")) {\r\n          props.setFormula(\"\");\r\n          props.setDisplayValue(\"0\" + props.symbol);\r\n        }\r\n        else if (!props.displayValue.includes(\".\")) {\r\n          props.setDisplayValue(props.displayValue + props.symbol);\r\n        }\r\n        break;\r\n      default:\r\n        if (props.formula.includes(\"=\")) {\r\n          props.setFormula(\"\");\r\n          props.setDisplayValue(props.symbol);\r\n        }\r\n        else if (props.displayValue === \"0\") {\r\n          props.setDisplayValue(props.symbol);\r\n        }\r\n        else {\r\n          props.setDisplayValue(props.displayValue + props.symbol);\r\n        }\r\n        break;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <button onClick={onButtonClick} className={getButtonStyle()}>\r\n      {props.symbol}\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default Button;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Controls_container__wFOpn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Calculator_container__312MG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1zVdC\"};","import React from 'react';\r\nimport Button from './Button/Button';\r\nimport styles from './Controls.module.scss'\r\n\r\nconst Controls = (props) => {\r\n  const data = require('./buttons.json');\r\n  const buttons = data.buttons;\r\n\r\n  const renderNewLine = (newLine) => {\r\n    if (newLine) {\r\n      return (\r\n        <br />\r\n      );\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      {buttons.map((item, index) => {\r\n        return (\r\n          <span key={index}>\r\n            {renderNewLine(item.newLine)}\r\n            <Button\r\n              symbol={item.symbol}\r\n              operator={item.operator}\r\n              displayValue={props.displayValue}\r\n              setDisplayValue={props.setDisplayValue}\r\n              formula={props.formula}\r\n              setFormula={props.setFormula}\r\n            />\r\n          </span>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Controls;","import React from 'react';\r\nimport styles from './Display.module.scss'\r\n\r\nconst Display = (props) => {\r\n  return (\r\n    <div className={styles.container}>\r\n      <input\r\n        value={props.formula}\r\n        readOnly={true}\r\n        className={styles.formula}\r\n      />\r\n      <input\r\n        value={props.displayValue}\r\n        readOnly={true}\r\n        className={styles.display}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Display;","import React, { useState } from 'react';\r\nimport Controls from './Controls/Controls';\r\nimport Display from './Display/Display';\r\nimport styles from './Calculator.module.scss'\r\n\r\nconst Calculator = () => {\r\n  const [displayValue, setDisplayValue] = useState(\"0\");\r\n  const [formula, setFormula] = useState(\"\");\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      <Display displayValue={displayValue} formula={formula} />\r\n      <Controls displayValue={displayValue} setDisplayValue={setDisplayValue} formula={formula} setFormula={setFormula} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Calculator;","import React from 'react';\r\nimport Calculator from './Calculator/Calculator';\r\nimport styles from './App.module.scss';\r\n\r\nconst App = () => {\r\n  return (\r\n    <div className={styles.container}>\r\n      <Calculator />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}